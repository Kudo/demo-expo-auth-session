diff --git a/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.cpp b/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.cpp
index aee8a32..6e109e3 100644
--- a/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.cpp
+++ b/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.cpp
@@ -73,6 +73,7 @@ void JavaScriptModuleObject::registerSyncFunction(
 
   methodsMetadata.try_emplace(
     cName,
+    longLivedObjectCollection_,
     cName,
     args,
     false,
@@ -92,6 +93,7 @@ void JavaScriptModuleObject::registerAsyncFunction(
 
   methodsMetadata.try_emplace(
     cName,
+    longLivedObjectCollection_,
     cName,
     args,
     true,
@@ -111,6 +113,7 @@ void JavaScriptModuleObject::registerProperty(
   types[0] = desiredType;
 
   auto getterMetadata = MethodMetadata(
+    longLivedObjectCollection_,
     cName,
     0,
     false,
@@ -119,6 +122,7 @@ void JavaScriptModuleObject::registerProperty(
   );
 
   auto setterMetadata = MethodMetadata(
+    longLivedObjectCollection_,
     cName,
     1,
     false,
@@ -147,6 +151,7 @@ JavaScriptModuleObject::HostObject::~HostObject() {
   jsModule->methodsMetadata.clear();
   jsModule->constants.clear();
   jsModule->properties.clear();
+  jsModule->longLivedObjectCollection_->clear();
 }
 
 jsi::Value JavaScriptModuleObject::HostObject::get(jsi::Runtime &runtime,
@@ -228,4 +233,10 @@ std::vector<jsi::PropNameID> JavaScriptModuleObject::HostObject::getPropertyName
 
   return result;
 }
+
+JavaScriptModuleObject::JavaScriptModuleObject(jni::alias_ref<jhybridobject> jThis)
+  : javaPart_(jni::make_global(jThis)) {
+  longLivedObjectCollection_ = std::make_shared<react::LongLivedObjectCollection>();
+}
+
 } // namespace expo
diff --git a/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h b/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
index 995cf5d..cf763ee 100644
--- a/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
+++ b/node_modules/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
@@ -4,6 +4,7 @@
 
 #include <fbjni/fbjni.h>
 #include <jsi/jsi.h>
+#include <react/bridging/LongLivedObject.h>
 #include <react/jni/ReadableNativeArray.h>
 #include <jni/JCallback.h>
 
@@ -115,6 +116,9 @@ public:
     JavaScriptModuleObject *jsModule;
   };
 
+private:
+  explicit JavaScriptModuleObject(jni::alias_ref<jhybridobject> jThis);
+
 private:
   friend HybridBase;
   /**
@@ -140,7 +144,10 @@ private:
    */
   std::map<std::string, std::pair<MethodMetadata, MethodMetadata>> properties;
 
-  explicit JavaScriptModuleObject(jni::alias_ref<jhybridobject> jThis)
-    : javaPart_(jni::make_global(jThis)) {}
+  /**
+   * The `LongLivedObjectCollection` to hold `LongLivedObject` (callbacks or promises) for this module.
+   */
+  std::shared_ptr<react::LongLivedObjectCollection> longLivedObjectCollection_;
+
 };
 } // namespace expo
diff --git a/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp b/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
index 60e89e2..baf3230 100644
--- a/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
+++ b/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
@@ -19,10 +19,16 @@ namespace expo {
 // https://github.com/facebook/react-native/blob/7dceb9b63c0bfd5b13bf6d26f9530729506e9097/ReactCommon/react/nativemodule/core/platform/android/ReactCommon/JavaTurboModule.cpp#L57
 jni::local_ref<react::JCxxCallbackImpl::JavaPart> createJavaCallbackFromJSIFunction(
   jsi::Function &&function,
+  std::weak_ptr<react::LongLivedObjectCollection> longLivedObjectCollection,
   jsi::Runtime &rt,
   std::shared_ptr<react::CallInvoker> jsInvoker
 ) {
-  auto weakWrapper = react::CallbackWrapper::createWeak(std::move(function), rt,
+  auto strongLongLiveObjectCollection = longLivedObjectCollection.lock();
+  if (!strongLongLiveObjectCollection) {
+    throw std::runtime_error("The LongLivedObjectCollection for MethodMetadata is not alive.");
+  }
+  auto weakWrapper = react::CallbackWrapper::createWeak(strongLongLiveObjectCollection,
+                                                        std::move(function), rt,
                                                         std::move(jsInvoker));
 
   // This needs to be a shared_ptr because:
@@ -150,12 +156,14 @@ std::vector<jvalue> MethodMetadata::convertJSIArgsToJNI(
 }
 
 MethodMetadata::MethodMetadata(
+  std::weak_ptr<react::LongLivedObjectCollection> longLivedObjectCollection,
   std::string name,
   int args,
   bool isAsync,
   std::unique_ptr<int[]> desiredTypes,
   jni::global_ref<jobject> &&jBodyReference
-) : name(std::move(name)),
+) : longLivedObjectCollection_(longLivedObjectCollection),
+    name(std::move(name)),
     args(args),
     isAsync(isAsync),
     desiredTypes(std::move(desiredTypes)),
@@ -308,12 +316,14 @@ jsi::Function MethodMetadata::createPromiseBody(
       auto &runtimeHolder = moduleRegistry->runtimeHolder;
       jobject resolve = createJavaCallbackFromJSIFunction(
         std::move(resolveJSIFn),
+        longLivedObjectCollection_,
         rt,
         runtimeHolder->jsInvoker
       ).release();
 
       jobject reject = createJavaCallbackFromJSIFunction(
         std::move(rejectJSIFn),
+        longLivedObjectCollection_,
         rt,
         runtimeHolder->jsInvoker
       ).release();
diff --git a/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.h b/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.h
index f2e9ca0..527a037 100644
--- a/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.h
+++ b/node_modules/expo-modules-core/android/src/main/cpp/MethodMetadata.h
@@ -5,6 +5,7 @@
 #include <jsi/jsi.h>
 #include <fbjni/fbjni.h>
 #include <ReactCommon/TurboModuleUtils.h>
+#include <react/bridging/LongLivedObject.h>
 #include <react/jni/ReadableNativeArray.h>
 #include <memory>
 #include <folly/dynamic.h>
@@ -52,6 +53,7 @@ public:
   std::unique_ptr<int[]> desiredTypes;
 
   MethodMetadata(
+    std::weak_ptr<react::LongLivedObjectCollection> longLivedObjectCollection,
     std::string name,
     int args,
     bool isAsync,
@@ -110,6 +112,8 @@ private:
    */
   std::shared_ptr<jsi::Function> body = nullptr;
 
+  std::weak_ptr<react::LongLivedObjectCollection> longLivedObjectCollection_;
+
   jsi::Function toSyncFunction(jsi::Runtime &runtime, JSIInteropModuleRegistry *moduleRegistry);
 
   jsi::Function toAsyncFunction(jsi::Runtime &runtime, JSIInteropModuleRegistry *moduleRegistry);
